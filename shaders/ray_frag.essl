precision highp float;
precision highp int;
precision mediump sampler3D;

uniform vec3 scale;
uniform sampler3D volume;
uniform float iso;
uniform vec3 color;

varying vec3 vertexPos;
varying vec3 camPos;

out vec4 fragColor;

struct Ray
{
    vec3 origin;
    vec3 dir;
    vec3 dirInv;
};

vec2 getIntersection(Ray ray) {
    float tMin = 0.0;
    float tMax = 999999999.0;

    for (int d = 0; d < 3; ++d) {
        float t1 = (0.0 - ray.origin[d]) * ray.dirInv[d];
        float t2 = (1.0 - ray.origin[d]) * ray.dirInv[d];

        tMin = max(tMin, min(t1, t2));
        tMax = min(tMax, max(t1, t2));
    }

    return vec2(tMin, tMax);
}

float getMip(vec2 intersection, Ray ray) {
    vec3 norm = 1.0 / (scale * abs(ray.dir));
    float stepSize = min(norm.x, min(norm.y, norm.z));

    float maxDensity = 0.0;
    for (float offset = intersection.x; offset < intersection.y; offset += stepSize) {
        vec3 textureCoord = ray.origin + offset * ray.dir;
        float density = texture(volume, textureCoord).r;
        maxDensity = max(maxDensity, density);
    }
    return maxDensity;
}

vec3 getFirstHit(vec2 intersection, Ray ray, float iso) {
    vec3 norm = 1.0 / (scale * abs(ray.dir));
    float stepSize = min(norm.x, min(norm.y, norm.z));

    for (float offset = intersection.x; offset < intersection.y; offset += stepSize) {
        vec3 currentTextureCoord = ray.origin + offset * ray.dir;
        float currentDensity = texture(volume, currentTextureCoord).r;

        vec3 nextTextureCoord = currentTextureCoord + stepSize * ray.dir;
        float nextDensity = texture(volume, nextTextureCoord).r;

        if (currentDensity < iso && nextDensity > iso) {
            float interpolFactor = (iso - currentDensity) / (nextDensity - currentDensity);
            return mix(currentTextureCoord, nextTextureCoord, interpolFactor);
        }
    }

    return vec3(0.0);
}

void main() {

    vec3 rayDir = normalize(vertexPos - camPos);
    vec3 invRayDir = 1.0 / rayDir;
    Ray ray = Ray(camPos, rayDir, invRayDir);

    vec2 intersection = getIntersection(ray);

    if (intersection.x < intersection.y) {
        float mipVal = getMip(intersection, ray);
        float alpha = clamp(mipVal, 0.0, 1.0);
        //fragColor = vec4(color, alpha);

        vec3 firstHitColor = getFirstHit(intersection, ray, iso);
        fragColor = vec4(firstHitColor, 1.0);
    }
}
